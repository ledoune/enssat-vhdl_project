library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity control_unit is
    port (
        clk                     : in std_logic;

        button_rst              : in std_logic;
        button_acq              : in std_logic;
        button_trt              : in std_logic;
        button_out              : in std_logic;

        acq_ram_write_enable    : out std_logic;
        acq_cnt_read_reset      : out std_logic;
        acq_cnt_read_enable     : out std_logic;
        acq_cnt_read_led        : out std_logic;
        acq_cnt_write_reset     : out std_logic;
        acq_cnt_write_enable    : out std_logic;
        acq_cnt_write_led       : out std_logic;

        out_ram_write_enable    : out std_logic;
        out_cnt_read_reset      : out std_logic;
        out_cnt_read_enable     : out std_logic;
        out_cnt_read_led        : out std_logic;
        out_cnt_write_reset     : out std_logic;
        out_cnt_write_enable    : out std_logic;
        out_cnt_write_led       : out std_logic
    );
end control_unit;

architecture logic of control_unit is
    type state_type is (rdy, acq, trt, res, rst);
    signal state : state_type;
    signal s_acq_cnt_read_enable : std_logic;
    signal s_acq_cnt_write_enable : std_logic;
    signal s_out_cnt_read_enable : std_logic;
    signal s_out_cnt_write_enable : std_logic;
begin
    process (clk, button_rst) begin
        if (button_rst = '0') then
            state <= rst;
        elsif (rising_edge(clk)) then
            case state is
                when rst =>
                    acq_cnt_read_reset      <= '1';
                    s_acq_cnt_read_enable   <= '0';
                    acq_cnt_write_reset     <= '0';
                    s_acq_cnt_write_enable  <= '0';

                    out_cnt_read_reset      <= '1';
                    s_out_cnt_read_enable   <= '0';
                    out_cnt_write_reset     <= '0';
                    s_out_cnt_write_enable  <= '0';

                    state <= rdy;

                when rdy =>
                    acq_ram_write_enable    <= '0';
                    acq_cnt_read_reset      <= '0';
                    s_acq_cnt_read_enable   <= '0';
                    acq_cnt_write_reset     <= '0';
                    s_acq_cnt_write_enable  <= '0';

                    out_ram_write_enable    <= '0';
                    out_cnt_read_reset      <= '0';
                    s_out_cnt_read_enable   <= '0';
                    out_cnt_write_reset     <= '0';
                    s_out_cnt_write_enable  <= '0';

                    if (button_acq = '0') then
                        state <= acq;
                    elsif (button_trt = '0') then
                        state <= trt;
                    elsif (button_out = '0') then
                        state <= res;
                    end if;

                when acq =>
                    if (button_acq = '0') then
                        acq_ram_write_enable  <= '1';
                        acq_cnt_read_reset    <= '0';
                        s_acq_cnt_read_enable <= '0';
                        acq_cnt_write_reset   <= '0';
                        s_acq_cnt_write_enable<= '1';

                        out_ram_write_enable  <= '0';
                        out_cnt_read_reset    <= '0';
                        s_out_cnt_read_enable <= '0';
                        out_cnt_write_reset   <= '0';
                        s_out_cnt_write_enable<= '0';
                    else
                        state <= rdy;
                    end if;

                when trt =>
                    if (button_trt = '0') then
                        acq_ram_write_enable  <= '0';
                        acq_cnt_read_reset    <= '0';
                        s_acq_cnt_read_enable <= '1';
                        acq_cnt_write_reset   <= '0';
                        s_acq_cnt_write_enable<= '0';

                        out_ram_write_enable  <= '1';
                        out_cnt_read_reset    <= '0';
                        s_out_cnt_read_enable <= '0';
                        out_cnt_write_reset   <= '0';
                        s_out_cnt_write_enable<= '1';
                    else
                        state <= rdy;
                    end if;

                when res =>
                    if (button_out = '0') then
                        acq_ram_write_enable  <= '0';
                        acq_cnt_read_reset    <= '0';
                        s_acq_cnt_read_enable <= '0';
                        acq_cnt_write_reset   <= '0';
                        s_acq_cnt_write_enable<= '0';

                        out_ram_write_enable  <= '0';
                        out_cnt_read_reset    <= '0';
                        s_out_cnt_read_enable <= '1';
                        out_cnt_write_reset   <= '0';
                        s_out_cnt_write_enable<= '0';
                    else
                        state <= rdy;
                    end if;
            end case;
        end if;

        acq_cnt_read_enable     <= s_acq_cnt_read_enable;
        acq_cnt_read_led        <= s_acq_cnt_read_enable;
        acq_cnt_write_enable    <= s_acq_cnt_write_enable;
        acq_cnt_write_led       <= s_acq_cnt_write_enable;
        out_cnt_read_led        <= s_out_cnt_read_enable;
        out_cnt_read_enable     <= s_out_cnt_read_enable;
        out_cnt_write_led       <= s_out_cnt_write_enable;
        out_cnt_write_enable    <= s_out_cnt_write_enable;
    end process;
end logic;
